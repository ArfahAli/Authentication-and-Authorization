{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CUI Atd\\\\Desktop\\\\E-COMMERCE MERN STACK\\\\ClientSide\\\\src\\\\Components\\\\Dashboard.js\";\n// import React, { useEffect, useState } from 'react'\n// import jwt from 'jsonwebtoken'\n// import { useNavigate } from 'react-router-dom'\n\n// const Dashboard = () => {\n// \tconst history = useNavigate()\n// \tconst [quote, setQuote] = useState('')\n// \tconst [tempQuote, setTempQuote] = useState('')\n\n// \tasync function populateQuote() {\n// \t\tconst req = await fetch('http://localhost:8000/api/quote', {\n// \t\t\theaders: {\n// \t\t\t\t'x-access-token': localStorage.getItem('token'),\n// \t\t\t},\n// \t\t})\n\n// \t\tconst data = await req.json()\n// \t\tif (data.status === 'ok') {\n// \t\t\tsetQuote(data.quote)\n// \t\t} else {\n// \t\t\talert(data.error)\n// \t\t}\n// \t}\n\n// \tuseEffect(() => {\n// \t\tconst token = localStorage.getItem('token')\n// \t\tif (token) {\n// \t\t\tconst user = jwt.decode(token)\n// \t\t\tif (!user) {\n// \t\t\t\tlocalStorage.removeItem('token')\n// \t\t\t\thistory.replace('/login')\n// \t\t\t} else {\n// \t\t\t\tpopulateQuote()\n// \t\t\t}\n// \t\t}\n// \t}, [])\n\n// \tasync function updateQuote(event) {\n// \t\tevent.preventDefault()\n\n// \t\tconst req = await fetch('http://localhost:8000/api/quote', {\n// \t\t\tmethod: 'POST',\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\t'x-access-token': localStorage.getItem('token'),\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({\n// \t\t\t\tquote: tempQuote,\n// \t\t\t}),\n// \t\t})\n\n// \t\tconst data = await req.json()\n// \t\tif (data.status === 'ok') {\n// \t\t\tsetQuote(tempQuote)\n// \t\t\tsetTempQuote('')\n// \t\t} else {\n// \t\t\talert(data.error)\n// \t\t}\n// \t}\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<h1>Your quote: {quote || 'No quote found'}</h1>\n// \t\t\t<form onSubmit={updateQuote}>\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tplaceholder=\"Quote\"\n// \t\t\t\t\tvalue={tempQuote}\n// \t\t\t\t\tonChange={(e) => setTempQuote(e.target.value)}\n// \t\t\t\t/>\n// \t\t\t\t<input type=\"submit\" value=\"Update quote\" />\n// \t\t\t</form>\n// \t\t</div>\n// \t)\n// }\n\n// export default Dashboard\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Dashboard\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Dashboard","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CUI Atd/Desktop/E-COMMERCE MERN STACK/ClientSide/src/Components/Dashboard.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\r\n// import jwt from 'jsonwebtoken'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\n// const Dashboard = () => {\r\n// \tconst history = useNavigate()\r\n// \tconst [quote, setQuote] = useState('')\r\n// \tconst [tempQuote, setTempQuote] = useState('')\r\n\r\n// \tasync function populateQuote() {\r\n// \t\tconst req = await fetch('http://localhost:8000/api/quote', {\r\n// \t\t\theaders: {\r\n// \t\t\t\t'x-access-token': localStorage.getItem('token'),\r\n// \t\t\t},\r\n// \t\t})\r\n\r\n// \t\tconst data = await req.json()\r\n// \t\tif (data.status === 'ok') {\r\n// \t\t\tsetQuote(data.quote)\r\n// \t\t} else {\r\n// \t\t\talert(data.error)\r\n// \t\t}\r\n// \t}\r\n\r\n// \tuseEffect(() => {\r\n// \t\tconst token = localStorage.getItem('token')\r\n// \t\tif (token) {\r\n// \t\t\tconst user = jwt.decode(token)\r\n// \t\t\tif (!user) {\r\n// \t\t\t\tlocalStorage.removeItem('token')\r\n// \t\t\t\thistory.replace('/login')\r\n// \t\t\t} else {\r\n// \t\t\t\tpopulateQuote()\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}, [])\r\n\r\n// \tasync function updateQuote(event) {\r\n// \t\tevent.preventDefault()\r\n\r\n// \t\tconst req = await fetch('http://localhost:8000/api/quote', {\r\n// \t\t\tmethod: 'POST',\r\n// \t\t\theaders: {\r\n// \t\t\t\t'Content-Type': 'application/json',\r\n// \t\t\t\t'x-access-token': localStorage.getItem('token'),\r\n// \t\t\t},\r\n// \t\t\tbody: JSON.stringify({\r\n// \t\t\t\tquote: tempQuote,\r\n// \t\t\t}),\r\n// \t\t})\r\n\r\n// \t\tconst data = await req.json()\r\n// \t\tif (data.status === 'ok') {\r\n// \t\t\tsetQuote(tempQuote)\r\n// \t\t\tsetTempQuote('')\r\n// \t\t} else {\r\n// \t\t\talert(data.error)\r\n// \t\t}\r\n// \t}\r\n\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t<h1>Your quote: {quote || 'No quote found'}</h1>\r\n// \t\t\t<form onSubmit={updateQuote}>\r\n// \t\t\t\t<input\r\n// \t\t\t\t\ttype=\"text\"\r\n// \t\t\t\t\tplaceholder=\"Quote\"\r\n// \t\t\t\t\tvalue={tempQuote}\r\n// \t\t\t\t\tonChange={(e) => setTempQuote(e.target.value)}\r\n// \t\t\t\t/>\r\n// \t\t\t\t<input type=\"submit\" value=\"Update quote\" />\r\n// \t\t\t</form>\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// export default Dashboard\r\nimport React from 'react'\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <div>Dashboard</div>\r\n  )\r\n}\r\n\r\nexport default Dashboard"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,oBACED,OAAA;IAAAE,QAAA,EAAK;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAM;AAExB,CAAC;AAAAC,EAAA,GAJKN,SAAS;AAMf,eAAeA,SAAS;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}